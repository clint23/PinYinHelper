//
//  PinYinHelper.swift
//  PinYinHelper
//
//  Created by 刘剑云 on 2018/11/23.
//  Copyright © 2018 ct. All rights reserved.
//

import UIKit

class PinYinHelper: NSObject {
    static let hanzi_start = 19968
    static let hanzi_count = 20902
    static let letters = ""
    
    static func isHanzi(_ value: Int) -> Bool {
        let index = value - hanzi_start
        return (index >= 0 && index <= hanzi_count)
    }
    
    static func toPinYin(_ value: Int) -> String {
        if (value >= 65 && value <= 90) || (value >= 97 && value <= 122) {
            return String(describing: Character.init(UnicodeScalar(value)!)).uppercased()
        }
        let index = value - hanzi_start
        if index >= 0 && index <= hanzi_count {
            return (letters as NSString).substring(with: NSRange(location: index, length: 1)).uppercased()
        }
        return "#"
    }
}

public typealias Transform<T> = (index: String, values: [T])

public extension String {
    public var isHanzi: Bool {
        get {
            var result = true
            for index in 0..<self.count {
                result = result && PinYinHelper.isHanzi(Int((self as NSString).character(at: index)))
                if !result {
                    break
                }
            }
            return result
        }
    }
    
    /// 首字符拼音
    public var pinyinFirst: String {
        get {
            if count > 0 {
                return PinYinHelper.toPinYin(Int((self as NSString).character(at: 0)))
            }
            return ""
        }
    }
    /// 拼音
    public var pinyin: String {
        get {
            var result = ""
            for index in 0..<self.count {
                result.append(PinYinHelper.toPinYin(Int((self as NSString).character(at: index))))
            }
            return result
        }
    }
}


public extension Array {
    /// 拼音分割排序
    ///
    /// - Parameter transform: 分割条件
    /// - Returns: 分割后的数组
    public func pinyin(_ transform: (Element) -> String) -> [Transform<Element>]  {
        let values = self.map { (element) -> (firstKey: String, allKey: String, value: Element) in
            let key = transform(element)
            return (key.pinyinFirst, key.pinyin, element)
        }
        let firsts = values.map{ $0.firstKey }
        var indexs = Array<String>(Set<String>(firsts)).sorted()
        if indexs.contains("#") {
            indexs.removeFirst()
            indexs.append("#")
        }
        var results: [Transform<Element>] = []
        indexs.forEach { (index) in
            let indexValues = values.filter{ $0.firstKey == index }.sorted(by: { (obj1, obj2) -> Bool in
                obj1.allKey.compare(obj2.allKey) == .orderedAscending
            })
            results.append((index, indexValues.map{$0.value}))
        }
        return results
    }
}
